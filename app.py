# app.py
from flask import Flask, request, jsonify
from flask_cors import CORS
import duckdb
import pandas as pd
import os
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat
from dotenv import load_dotenv
import numpy as np

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∞–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π
from anomaly_agent import AnomalyDetectorAgent, should_analyze_anomalies_by_data

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flask ---
app = Flask(__name__)
CORS(app)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π ---
ANOMALY_AUTO_CONFIG = {
    "intent_keywords": [
        '–∞–Ω–æ–º–∞–ª–∏', '–≤—ã–±—Ä–æ—Å', '–Ω–µ–æ–±—ã—á–Ω', '—Å—Ç—Ä–∞–Ω–Ω', '–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω', '–æ—Ç–∫–ª–æ–Ω–µ–Ω',
        '–º–∞–∫—Å–∏–º–∞–ª—å–Ω', '–º–∏–Ω–∏–º–∞–ª—å–Ω', '—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω', '–∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö', '–ø—Ä–æ–±–ª–µ–º',
        '–æ—à–∏–±–∫', '–∑–∞—Ä–ø–ª–∞—Ç', '–º–∏–≥—Ä–∞—Ü–∏', '–Ω–∞—Å–µ–ª–µ–Ω', '—Å—Ä–∞–≤–Ω–∏', '–¥–∏–Ω–∞–º–∏–∫', '—Ç—Ä–µ–Ω–¥',
        '–∞–Ω–∞–ª–∏–∑', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω', '—Ä–∞–∑–ª–∏—á–∏', '—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω', '–≤—ã—è–≤–∏—Ç—å', '–Ω–∞–π—Ç–∏'
    ],
    "data_criteria": {
        "min_records": 10,
        "min_numeric_columns": 1,
        "min_regions": 3,
        "enable_for_salary": True,
        "enable_for_aggregations": True,
        "enable_for_time_series": True
    },
    "auto_threshold": 2
}

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DuckDB ---
PATH_MARKET_ACCESS = 'data/1_market_access.parquet'
PATH_POPULATION = 'data/2_bdmo_population.parquet'
PATH_MIGRATION = 'data/3_bdmo_migration.parquet'
PATH_SALARY = 'data/4_bdmo_salary.parquet'
PATH_CONNECTIONS = 'data/5_connection.parquet'
PATH_MO_DIRECTORY = 'data/t_dict_municipal_districts.xlsx'

duckdb_con = None

def setup_duckdb():
    global duckdb_con
    mo_directory_created_successfully = False
    all_parquet_views_created = True
    try:
        duckdb_con = duckdb.connect(database=':memory:', read_only=False)
        print("\n--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DuckDB –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π (Flask app) ---")
        parquet_files = {
            "market_access": PATH_MARKET_ACCESS, "population": PATH_POPULATION,
            "migration": PATH_MIGRATION, "salary": PATH_SALARY, "connections": PATH_CONNECTIONS
        }
        for view_name, file_path in parquet_files.items():
            if not os.path.exists(file_path):
                print(f"[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –§–∞–π–ª Parquet –Ω–µ –Ω–∞–π–¥–µ–Ω: '{file_path}'. –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ '{view_name}' –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ.")
                all_parquet_views_created = False
                continue
            try:
                duckdb_con.execute(f"CREATE VIEW {view_name} AS SELECT * FROM read_parquet('{file_path}')")
                print(f"–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ '{view_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ '{file_path}'.")
            except Exception as e:
                print(f"[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ '{view_name}' –∏–∑ —Ñ–∞–π–ª–∞ '{file_path}': {e}.")
                all_parquet_views_created = False

        print(f"\n–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ú–û –∏–∑ —Ñ–∞–π–ª–∞: {PATH_MO_DIRECTORY}")
        if not os.path.exists(PATH_MO_DIRECTORY):
            print(f"[–û–®–ò–ë–ö–ê] –§–∞–π–ª —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ú–û –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {PATH_MO_DIRECTORY}")
        elif PATH_MO_DIRECTORY.endswith('.xlsx'):
            try:
                print(f"–ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞: {PATH_MO_DIRECTORY}...")
                df_mo_directory = pd.read_excel(PATH_MO_DIRECTORY, dtype={'territory_id': str})
                print(f"Excel —Ñ–∞–π–ª '{PATH_MO_DIRECTORY}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω. –ö–æ–ª–æ–Ω–∫–∏: {df_mo_directory.columns.tolist()}")
                required_cols = ['territory_id', 'municipal_district_name']
                missing_cols = [col for col in required_cols if col not in df_mo_directory.columns]
                if missing_cols:
                    raise ValueError(f"Excel —Ñ–∞–π–ª —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ú–û '{PATH_MO_DIRECTORY}' –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}.")
                duckdb_con.register('mo_directory_temp_df', df_mo_directory)
                duckdb_con.execute("CREATE VIEW mo_directory AS SELECT CAST(territory_id AS VARCHAR) AS territory_id, municipal_district_name FROM mo_directory_temp_df")
                print(f"–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 'mo_directory' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ Excel —Ñ–∞–π–ª–∞: {PATH_MO_DIRECTORY}")
                mo_directory_created_successfully = True
            except Exception as e:
                print(f"[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Excel —Ñ–∞–π–ª —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ú–û '{PATH_MO_DIRECTORY}': {e}")
        elif PATH_MO_DIRECTORY.endswith('.parquet'):
            try:
                duckdb_con.execute(f"CREATE VIEW mo_directory AS SELECT CAST(territory_id AS VARCHAR) AS territory_id, municipal_district_name FROM read_parquet('{PATH_MO_DIRECTORY}')")
                print(f"–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 'mo_directory' —Å–æ–∑–¥–∞–Ω–æ –∏–∑ Parquet —Ñ–∞–π–ª–∞: {PATH_MO_DIRECTORY}")
                mo_directory_created_successfully = True
            except Exception as e:
                 print(f"[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 'mo_directory' –∏–∑ Parquet —Ñ–∞–π–ª–∞ '{PATH_MO_DIRECTORY}': {e}")
        elif PATH_MO_DIRECTORY.endswith('.csv'):
            try:
                duckdb_con.execute(f"CREATE VIEW mo_directory AS SELECT CAST(territory_id AS VARCHAR) AS territory_id, \"municipal_district_name\" FROM read_csv_auto('{PATH_MO_DIRECTORY}', header=true, all_varchar=true)")
                print(f"–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 'mo_directory' —Å–æ–∑–¥–∞–Ω–æ –∏–∑ CSV —Ñ–∞–π–ª–∞: {PATH_MO_DIRECTORY}")
                mo_directory_created_successfully = True
            except Exception as e:
                print(f"[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 'mo_directory' –∏–∑ CSV —Ñ–∞–π–ª–∞ '{PATH_MO_DIRECTORY}': {e}")
        else:
            print(f"[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ú–û –ø–æ –∏–º–µ–Ω–∏: {PATH_MO_DIRECTORY}.")
        
        if not mo_directory_created_successfully:
            print("[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ 'mo_directory' –ù–ï —Å–æ–∑–¥–∞–Ω–æ.")
            return False
        if not all_parquet_views_created:
            print("[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ù–µ –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è Parquet-—Ñ–∞–π–ª–æ–≤ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
        return True
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê DuckDB] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DuckDB –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}")
        duckdb_con = None
        return False

def execute_duckdb_query(sql_query):
    global duckdb_con
    if duckdb_con is None: return None
    print(f"\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL: {sql_query}")
    try:
        return duckdb_con.execute(sql_query).fetchdf()
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê DuckDB Query] {e}")
        return None

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GigaChat ---
GIGA_CREDENTIALS = os.environ.get("GIGACHAT_TOKEN")
giga_client = None
anomaly_agent = None

try:
    giga_client = GigaChat(credentials=GIGA_CREDENTIALS, verify_ssl_certs=False, model="GigaChat-2-Max")
    print("–ö–ª–∏–µ–Ω—Ç GigaChat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Flask app).")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π
    anomaly_agent = AnomalyDetectorAgent(giga_client, verbose=True)
    print("üîç –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    
except Exception as e:
    print(f"[–û–®–ò–ë–ö–ê GigaChat Init] {e}")

TABLE_CONTEXT = """
–¢–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è DuckDB) –∏ –∏—Ö –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã. –ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∞–ª–∏–∞—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, `p` –¥–ª—è `population`, `ma` –¥–ª—è `market_access`, `md` –¥–ª—è `mo_directory`, `s` –¥–ª—è `salary`, `mig` –¥–ª—è `migration`, `c` –¥–ª—è `connections`) –∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É–π –í–°–ï –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ —ç—Ç–∏–º–∏ –∞–ª–∏–∞—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `p.year`, `md.territory_id`, `s.value`). –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ `territory_id` –∏ `year`, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö.

1.  **market_access** (–∞–ª–∏–∞—Å `ma`):
    * `territory_id` (STRING): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ú–û. (–ò—Å–ø–æ–ª—å–∑—É–π `ma.territory_id`)
    * `market_access` (FLOAT): –ò–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–æ–≤ –Ω–∞ 2024 –≥–æ–¥. (–ò—Å–ø–æ–ª—å–∑—É–π `ma.market_access`)
2.  **population** (–∞–ª–∏–∞—Å `p`):
    * `territory_id` (STRING): (–ò—Å–ø–æ–ª—å–∑—É–π `p.territory_id`)
    * `year` (INTEGER): –î–∞–Ω–Ω—ã–µ –∑–∞ 2023, 2024 –≥–≥. (–ò—Å–ø–æ–ª—å–∑—É–π `p.year`)
    * `age` (STRING): –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í—Å–µ –≤–æ–∑—Ä–∞—Å—Ç–∞' –¥–ª—è –æ–±—â–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è). (–ò—Å–ø–æ–ª—å–∑—É–π `p.age`)
    * `gender` (STRING): –ü–æ–ª. (–ò—Å–ø–æ–ª—å–∑—É–π `p.gender`)
    * `value` (INTEGER): –ß–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è. (–ò—Å–ø–æ–ª—å–∑—É–π `p.value`)
3.  **migration** (–∞–ª–∏–∞—Å `mig`):
    * `territory_id` (STRING): (–ò—Å–ø–æ–ª—å–∑—É–π `mig.territory_id`)
    * `year` (INTEGER): –î–∞–Ω–Ω—ã–µ –∑–∞ 2023, 2024 –≥–≥. (–ò—Å–ø–æ–ª—å–∑—É–π `mig.year`)
    * `age` (STRING): (–ò—Å–ø–æ–ª—å–∑—É–π `mig.age`)
    * `gender` (STRING): (–ò—Å–ø–æ–ª—å–∑—É–π `mig.gender`)
    * `value` (INTEGER): –ß–∏—Å–ª–æ –º–∏–≥—Ä–∞–Ω—Ç–æ–≤. (–ò—Å–ø–æ–ª—å–∑—É–π `mig.value`)
4.  **salary** (–∞–ª–∏–∞—Å `s`):
    * `territory_id` (STRING): (–ò—Å–ø–æ–ª—å–∑—É–π `s.territory_id`)
    * `year` (INTEGER): –° 1 –∫–≤. 2023 –≥. –ø–æ 4 –∫–≤. 2024 –≥. (–ò—Å–ø–æ–ª—å–∑—É–π `s.year`)
    * `period` (STRING): –ö–≤–∞—Ä—Ç–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1 –∫–≤–∞—Ä—Ç–∞–ª', '2 –∫–≤–∞—Ä—Ç–∞–ª', '3 –∫–≤–∞—Ä—Ç–∞–ª', '4 –∫–≤–∞—Ä—Ç–∞–ª'). (–ò—Å–ø–æ–ª—å–∑—É–π `s.period`)
    * `okved_name` (STRING): –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–û–ö–í–≠–î). (–ò—Å–ø–æ–ª—å–∑—É–π `s.okved_name`)
    * `okved_letter` (STRING): –ë—É–∫–≤–µ–Ω–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –û–ö–í–≠–î. (–ò—Å–ø–æ–ª—å–∑—É–π `s.okved_letter`)
    * `value` (FLOAT): –°—Ä–µ–¥–Ω–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞. –í–ê–ñ–ù–û: —ç—Ç–æ –∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π `s.value` –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–π —Ç–∏–ø–∞ AVG. (–ò—Å–ø–æ–ª—å–∑—É–π `s.value`)
5.  **connections** (–∞–ª–∏–∞—Å `c`):
    * `territory_id_x` (STRING): ID –ú–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è. (–ò—Å–ø–æ–ª—å–∑—É–π `c.territory_id_x`)
    * `territory_id_y` (STRING): ID –ú–û –ø—Ä–∏–±—ã—Ç–∏—è. (–ò—Å–ø–æ–ª—å–∑—É–π `c.territory_id_y`)
    * `distance` (FLOAT): –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º. (–ò—Å–ø–æ–ª—å–∑—É–π `c.distance`)
6.  **mo_directory** (–∞–ª–∏–∞—Å `md`): (–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ú–û)
    * `territory_id` (STRING): –ö–æ–¥ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏. (–ò—Å–ø–æ–ª—å–∑—É–π `md.territory_id`)
    * `municipal_district_name` (STRING): –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ú–û. (–ò—Å–ø–æ–ª—å–∑—É–π `md.municipal_district_name`)

–ü–†–ò–ú–ï–ß–ê–ù–ò–ï –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò SQL: –ü—Ä–∏ JOIN `mo_directory` —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–π `md.territory_id = other_alias.territory_id`. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è `territory_id` —Å–æ–≤–ø–∞–¥–∞—é—Ç (–≤—Å–µ `territory_id` –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å VARCHAR, —á—Ç–æ —É–∂–µ —É—á—Ç–µ–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π). –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π `md.municipal_district_name` –≤ SELECT, –µ—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π. –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ª–∏—Ç–µ—Ä–∞–ª–æ–≤ –≤ SQL –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ª—é–±–∞—è –∫–æ–ª–æ–Ω–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤ WHERE, SELECT, GROUP BY –∏–ª–∏ ORDER BY, –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü –≤ FROM/JOIN –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –∞–ª–∏–∞—Å–æ–º.
"""

def call_giga_api_wrapper(prompt_text, system_instruction):
    if giga_client is None: return "[–û–®–ò–ë–ö–ê API] –ö–ª–∏–µ–Ω—Ç GigaChat –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."
    print(f"\n–í—ã–∑–æ–≤ GigaChat: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–Ω–∞—á–∞–ª–æ): {system_instruction[:100]}... –ü—Ä–æ–º–ø—Ç: {prompt_text[:100]}...")
    try:
        messages = [SystemMessage(content=system_instruction), HumanMessage(content=prompt_text)]
        res = giga_client.invoke(messages)
        print(f"GigaChat –æ—Ç–≤–µ—Ç (–Ω–∞—á–∞–ª–æ): {res.content[:100]}...")
        return res.content.strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ GigaChat API: {e}")
        return f"[–û–®–ò–ë–ö–ê API] {e}"

# --- –ê–ì–ï–ù–¢ 0: –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏–π ---
def agent0_intent_analyzer(user_prompt):
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π"""
    
    system_instruction = """
    –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–ø—Ä–µ–¥–µ–ª–∏, –Ω—É–∂–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    
    –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –ù–£–ñ–ï–ù –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç:
    - –°–ª–æ–≤–∞: "–∞–Ω–æ–º–∞–ª–∏–∏", "–≤—ã–±—Ä–æ—Å—ã", "–Ω–µ–æ–±—ã—á–Ω—ã–µ", "—Å—Ç—Ä–∞–Ω–Ω—ã–µ", "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ", "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"
    - –ü—Ä–æ—Å—å–±—ã –Ω–∞–π—Ç–∏ "–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ", "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ", "—ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ" –∑–Ω–∞—á–µ–Ω–∏—è
    - –í–æ–ø—Ä–æ—Å—ã –æ "–∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö", "–ø—Ä–æ–±–ª–µ–º–∞—Ö", "–æ—à–∏–±–∫–∞—Ö"  
    - –°—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤/—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π (–º–æ–≥—É—Ç –≤—ã—è–≤–∏—Ç—å –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    - –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç, –º–∏–≥—Ä–∞—Ü–∏–∏, –Ω–∞—Å–µ–ª–µ–Ω–∏—è (—á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –∞–Ω–æ–º–∞–ª–∏–∏)
    - –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑, —Ç—Ä–µ–Ω–¥—ã (–º–æ–≥—É—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–æ–º–∞–ª–∏–∏)
    - –°–ª–æ–≤–∞ "–∞–Ω–∞–ª–∏–∑", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑–ª–∏—á–∏—è", "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–≤—ã—è–≤–∏—Ç—å"
    - –í–æ–ø—Ä–æ—Å—ã —Ç–∏–ø–∞ "–∫–∞–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è", "–≥–¥–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ", "–≥–¥–µ –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ"
    
    –ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –ù–ï –ù–£–ñ–ï–ù –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å:
    - –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    - –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    - –ü—Ä–æ—Å—Ç—ã–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π
    
    –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û "true" –∏–ª–∏ "false".
    """
    
    try:
        response = call_giga_api_wrapper(user_prompt, system_instruction)
        print(f"üîç –û—Ç–≤–µ—Ç LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: '{response}'")  # –û—Ç–ª–∞–¥–∫–∞
        response_lower = response.lower().strip()
        
        if "true" in response_lower:
            print("‚úÖ LLM —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π")
            return True
        elif "false" in response_lower:
            print("‚ùå LLM –ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π")
            return False
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç LLM: '{response}', –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥")
            return _fallback_anomaly_detection(user_prompt)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≥–µ–Ω—Ç–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: {e}")
        return _fallback_anomaly_detection(user_prompt)

def _fallback_anomaly_detection(user_prompt):
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π"""
    user_prompt_lower = user_prompt.lower()
    found_keywords = [keyword for keyword in ANOMALY_AUTO_CONFIG["intent_keywords"] if keyword in user_prompt_lower]
    if found_keywords:
        print(f"üîç –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥: –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
        return True
    else:
        print("üîç –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False

# --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–≥–µ–Ω—Ç—ã ---
def agent1_rephraser(user_prompt):
    system_instruction = "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —á–µ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–õ–¨–ö–û –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
    return call_giga_api_wrapper(user_prompt, system_instruction)

def agent2_planner(formal_prompt):
    system_instruction = (
        "–¢—ã ‚Äî –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π, –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–ò—Å–ø–æ–ª—å–∑—É–π TABLE_CONTEXT. –í—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–õ–¨–ö–û –ø–ª–∞–Ω. –ù–ï –í–ö–õ–Æ–ß–ê–ô SQL."
        f"\n\n{TABLE_CONTEXT}"
    )
    return call_giga_api_wrapper(formal_prompt, system_instruction)

def agent3_sql_generator(plan):
    system_instruction = (
        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL. –ù–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –∏ TABLE_CONTEXT —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π SQL-–∑–∞–ø—Ä–æ—Å. "
        "–í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –∞–ª–∏–∞—Å—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, `p` –¥–ª—è `population`, `ma` –¥–ª—è `market_access`, `md` –¥–ª—è `mo_directory`, `s` –¥–ª—è `salary`) –∏ –í–°–ï–ì–î–ê –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä—É–π –ö–ê–ñ–î–û–ï –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ —ç—Ç–∏–º –∞–ª–∏–∞—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, `p.year`, `md.territory_id`, `s.value` –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã). –≠—Ç–æ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –≤–∞–∂–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è `territory_id` –∏ `year`. "
        "–ö–†–ê–ô–ù–ï –í–ê–ñ–ù–û: –ï—Å–ª–∏ –ø–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ `territory_id` –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º–∏, —Ç—ã –û–ë–Ø–ó–ê–ù –≤–∫–ª—é—á–∏—Ç—å –≤ SELECT —Å—Ç–æ–ª–±–µ—Ü `md.municipal_district_name` –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å JOIN —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º `mo_directory` (–∞–ª–∏–∞—Å `md`) –ø–æ `md.territory_id = relevant_table_alias.territory_id` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –ú–û. "
        "–ü—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π –Ω–∞ –∫–æ–ª–æ–Ω–∫—É `year` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `WHERE p.year = 2024`), —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è `year` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `population` —Å –∞–ª–∏–∞—Å–æ–º `p`), –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞ –≤ `FROM` –∏–ª–∏ `JOIN` —á–∞—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∏ –∫–æ–ª–æ–Ω–∫–∞ `year` –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `p.year`). "
        "–î–ª—è —Ç–∞–±–ª–∏—Ü—ã `salary` (–∞–ª–∏–∞—Å `s`), —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–ª–æ–Ω–∫–µ `s.value`. –ü—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π `AVG(s.value)`. "
        "–í—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û SQL-–∑–∞–ø—Ä–æ—Å –≤ –±–ª–æ–∫–µ ``````."
        f"\n\n{TABLE_CONTEXT}"
    )
    sql_query_block = call_giga_api_wrapper(plan, system_instruction)
    if sql_query_block and "```" in sql_query_block:
        try:
            # Try to extract SQL from ```sql ... ``` or just ``` ... ```
            if "```sql" in sql_query_block:
                return sql_query_block.split("```sql")[1].split("```")[0].strip()
            else:
                return sql_query_block.split("```")[1].split("```")[0].strip()
        except IndexError:
            return sql_query_block.strip()
    elif sql_query_block and sql_query_block.strip().upper().startswith("SELECT"):
        return sql_query_block.strip()
    return sql_query_block

def agent4_answer_generator(sql_result_df, initial_user_prompt):
    if sql_result_df is None: 
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ SQL."
    if sql_result_df.empty: 
        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    data_as_string = sql_result_df.to_markdown(index=False) if not sql_result_df.empty else "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    system_instruction = (
        "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ–±—ä—è—Å–Ω—è—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö. "
        "–¢–µ–±–µ –¥–∞–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–Ω–Ω—ã–µ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç SQL –≤ Markdown). "
        "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å NaN, —É–∫–∞–∂–∏, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
    )
    prompt_for_llm = (
        f"–ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \"{initial_user_prompt}\"\n\n"
        f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (Markdown):\n{data_as_string}\n\n–û—Ç–≤–µ—Ç:"
    )
    return call_giga_api_wrapper(prompt_for_llm, system_instruction)

# --- API –≠–Ω–¥–ø–æ–∏–Ω—Ç ---
@app.route('/process_query', methods=['POST'])
def process_query():
    if not duckdb_con: 
        return jsonify({"error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö DuckDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."}), 500
    if giga_client is None:
        return jsonify({"error": "–ö–ª–∏–µ–Ω—Ç GigaChat –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."}), 500

    try:
        data = request.get_json()
        user_prompt = data.get('user_prompt')
        force_anomaly_analysis = data.get('force_analyze_anomalies', False)
        
        if not user_prompt:
            return jsonify({"error": "user_prompt –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"}), 400

        print(f"\n{'='*60}")
        print(f"üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_prompt}")
        if force_anomaly_analysis:
            print("üîí –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π –≤–∫–ª—é—á–µ–Ω")

        # –®–ê–ì 0: –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π
        auto_anomaly_needed = agent0_intent_analyzer(user_prompt)
        print(f"üß† –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π: –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π {'–ù–£–ñ–ï–ù' if auto_anomaly_needed else '–ù–ï –ù–£–ñ–ï–ù'}")

        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
        print("\nü§ñ –ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        formal_request = agent1_rephraser(user_prompt)
        print("‚úÖ –ê–≥–µ–Ω—Ç 1 (–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞) –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        plan = agent2_planner(formal_request)
        print("‚úÖ –ê–≥–µ–Ω—Ç 2 (–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ) –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        sql_query = agent3_sql_generator(plan)
        print("‚úÖ –ê–≥–µ–Ω—Ç 3 (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL) –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        sql_results_df = None
        sql_results_str = "SQL-–∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö."
        anomaly_analysis = None
        data_based_anomaly_needed = False
        
        if sql_query and "SELECT" in sql_query.upper() and duckdb_con:
            sql_results_df = execute_duckdb_query(sql_query)
            if sql_results_df is not None:
                sql_results_str = sql_results_df.to_markdown(index=False) if not sql_results_df.empty else "–ó–∞–ø—Ä–æ—Å SQL –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                
                # –®–ê–ì: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
                data_based_anomaly_needed = should_analyze_anomalies_by_data(
                    sql_results_df, sql_query, ANOMALY_AUTO_CONFIG["data_criteria"]
                )
                print(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π {'–†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù' if data_based_anomaly_needed else '–ù–ï –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù'}")
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–π
                print(f"\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–æ–º–∞–ª–∏–π:")
                print(f"   force_anomaly_analysis: {force_anomaly_analysis}")
                print(f"   auto_anomaly_needed: {auto_anomaly_needed}")
                print(f"   data_based_anomaly_needed: {data_based_anomaly_needed}")
                print(f"   sql_results_df –ø—É—Å—Ç–æ–π: {sql_results_df is None or sql_results_df.empty}")
                print(f"   anomaly_agent –¥–æ—Å—Ç—É–ø–µ–Ω: {anomaly_agent is not None}")
                
                # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ –∞–Ω–æ–º–∞–ª–∏–π
                should_analyze = force_anomaly_analysis or auto_anomaly_needed or data_based_anomaly_needed
                print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ should_analyze: {should_analyze}")
                
                if should_analyze and not sql_results_df.empty and anomaly_agent:
                    print("\nüîç ‚úÖ –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã - –∑–∞–ø—É—Å–∫–∞—é –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π...")
                    anomaly_analysis = anomaly_agent.detect_anomalies(sql_results_df, user_prompt)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if anomaly_analysis.get("anomalies_found"):
                        print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏ –≤ {anomaly_analysis.get('analyzed_columns', [])} —Å—Ç–æ–ª–±—Ü–∞—Ö")
                    else:
                        print("‚úÖ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                else:
                    print("\nüîç ‚ùå –£—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
                    if not should_analyze:
                        print("     - should_analyze = False")
                    if sql_results_df is None or sql_results_df.empty:
                        print("     - sql_results_df –ø—É—Å—Ç–æ–π")
                    if not anomaly_agent:
                        print("     - anomaly_agent –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                sql_results_str = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º. –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞)."
        
        final_answer = agent4_answer_generator(sql_results_df, user_prompt)
        print("‚úÖ –ê–≥–µ–Ω—Ç 4 (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞) –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
        if anomaly_analysis and anomaly_analysis.get("anomalies_found"):
            final_answer += f"\n\nüö® **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π:**\n{anomaly_analysis['message']}"

        response_data = {
            "formal_request": formal_request,
            "plan": plan,
            "sql_query": sql_query,
            "sql_results_str": sql_results_str,
            "final_answer": final_answer,
            "auto_anomaly_analysis": {
                "intent_based": auto_anomaly_needed,
                "data_based": data_based_anomaly_needed,
                "executed": anomaly_analysis is not None,
                "forced": force_anomaly_analysis
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –≤ –æ—Ç–≤–µ—Ç
        if anomaly_analysis:
            response_data["anomaly_analysis"] = anomaly_analysis

        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print("="*60)
        return jsonify(response_data)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /process_query: {e}")
        return jsonify({"error": str(e)}), 500

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
@app.route('/configure_anomaly', methods=['POST'])
def configure_anomaly():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π"""
    try:
        config_updates = request.get_json()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if 'intent_keywords' in config_updates:
            ANOMALY_AUTO_CONFIG['intent_keywords'].extend(config_updates['intent_keywords'])
        
        if 'data_criteria' in config_updates:
            ANOMALY_AUTO_CONFIG['data_criteria'].update(config_updates['data_criteria'])
        
        if 'auto_threshold' in config_updates:
            ANOMALY_AUTO_CONFIG['auto_threshold'] = config_updates['auto_threshold']
        
        return jsonify({
            "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            "current_config": ANOMALY_AUTO_CONFIG
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ ---
@app.route('/system_info', methods=['GET'])
def system_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return jsonify({
        "agents": [
            {"id": 0, "name": "Intent Analyzer", "description": "–ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π"},
            {"id": 1, "name": "Rephraser", "description": "–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"},
            {"id": 2, "name": "Planner", "description": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"},
            {"id": 3, "name": "SQL Generator", "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤"},
            {"id": 4, "name": "Answer Generator", "description": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤"},
            {"id": 5, "name": "Anomaly Detector", "description": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π (–æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)"}
        ],
        "anomaly_config": ANOMALY_AUTO_CONFIG,
        "database_status": duckdb_con is not None,
        "gigachat_status": giga_client is not None,
        "anomaly_agent_status": anomaly_agent is not None,
        "version": "2.1 - –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"
    })

if __name__ == '__main__':
    if setup_duckdb(): 
        print("\nüöÄ –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:")
        print("  0. üß† –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π)")
        print("  1. üìù –ê–≥–µ–Ω—Ç –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("  2. üìã –ê–≥–µ–Ω—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("  3. üíæ –ê–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL")
        print("  4. üí¨ –ê–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤")
        print("  5. üîç –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π (–æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)")
        print("\n‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("  - –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π")
        print("  - –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–Ω–æ–º–∞–ª–∏–π")
        print("  - –ú—É–ª—å—Ç–∏–º–µ—Ç–æ–¥–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π (Z-Score, IQR, Isolation Forest)")
        print("  - LLM-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∞–Ω–æ–º–∞–ª–∏–π")
        print("  - –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –æ—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π")
        print("\nüåê Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ –ø–æ—Ä—Ç—É 5001!")
        app.run(debug=True, port=5001) 
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DuckDB.")

