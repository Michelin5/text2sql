from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat
import pandas as pd
import sqlite3
import json
import sqliteschema
import os
import argparse
import sys
from dotenv import load_dotenv

class SQLAssistant:
    def __init__(self, data_path='data/2_bdmo_population.parquet', db_path='population.db'):
        self.data_path = data_path
        self.db_path = db_path
        self.llm = None
        self.system_prompt = None
        
    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ parquet —Ñ–∞–π–ª–∞...")
        try:
            population = pd.read_parquet(self.data_path)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(population)} —Å—Ç—Ä–æ–∫")
            print(population.head())
            
            print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            connection = sqlite3.connect(self.db_path)
            population.to_sql('population', connection, if_exists='replace', index=False)
            connection.close()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            return population
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def get_column_values_summary(self, df):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö"""
        summary = {}
        for column in df.columns:
            unique_values = df[column].dropna().unique()
            if len(unique_values) <= 50:
                summary[column] = sorted(map(str, unique_values))
        return summary
    
    def setup_llm(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM"""
        load_dotenv()
        giga_token = os.getenv("GIGACHAT_TOKEN")
        if giga_token is None:
            raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GIGACHAT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        
        self.llm = GigaChat(
            credentials=giga_token, 
            verify_ssl_certs=False,
            model="GigaChat-2-Max",
            temperature=0.1
        )
        print("ü§ñ GigaChat –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def create_system_prompt(self, population):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        extractor = sqliteschema.SQLiteSchemaExtractor(self.db_path)
        schema = extractor.fetch_database_schema_as_dict()
        column_values_summary = self.get_column_values_summary(population)
        
        self.system_prompt = f"""
# –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è SQLite

–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite.

## –ü—Ä–∞–≤–∏–ª–∞:
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É population
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –∏–∑ —Å—Ö–µ–º—ã
- –ò–∑–±–µ–≥–∞–π—Ç–µ SELECT * ‚Äî –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
- –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π SQL –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DISTINCT –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

SQL-—Å—Ö–µ–º–∞:
{json.dumps(schema, indent=2)}

–ó–Ω–∞—á–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤:
{json.dumps(column_values_summary, indent=2)}
"""
    
    def execute_sql_query(self, sql: str):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            result = pd.read_sql_query(sql, conn)
            conn.close()
            return result
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL: {e}"
    
    def generate_sql(self, user_question: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞"""
        response = self.llm.invoke([
            SystemMessage(content=self.system_prompt),
            HumanMessage(content=user_question)
        ])
        sql = response.content.strip()
        return sql
    
    def ask_question(self, user_question: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\nüí¨ –í–æ–ø—Ä–æ—Å: {user_question}")
        
        sql = self.generate_sql(user_question)
        print(f"\nüìú –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:\n{sql}\n")
        
        if not sql:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å."
        
        result = self.execute_sql_query(sql)
        
        if isinstance(result, pd.DataFrame):
            if result.empty:
                print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return None
            else:
                print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                print(result.to_string(index=False))
                return result
        else:
            print(result)
            return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    parser = argparse.ArgumentParser(description='SQL Assistant –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–∏—è')
    parser.add_argument('--data', default='data/2_bdmo_population.parquet', 
                       help='–ü—É—Ç—å –∫ parquet —Ñ–∞–π–ª—É')
    parser.add_argument('--db', default='population.db', 
                       help='–ü—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--setup-only', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–π—Ç–∏')
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    assistant = SQLAssistant(args.data, args.db)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    population = assistant.setup_database()
    if population is None:
        sys.exit(1)
    
    if args.setup_only:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –í—ã—Ö–æ–¥.")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM
    try:
        assistant.setup_llm()
        assistant.create_system_prompt(population)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM: {e}")
        sys.exit(1)
    
    print("\nüöÄ SQL Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å–µ–ª–µ–Ω–∏—è (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    print("–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
    print("- –ü–æ–∫–∞–∂–∏ –æ–±—â—É—é —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
    print("- –ö–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–º–µ—é—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1 –º–∏–ª–ª–∏–æ–Ω–∞?")
    print("- –ü–æ–∫–∞–∂–∏ –¥–∏–Ω–∞–º–∏–∫—É –Ω–∞—Å–µ–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    while True:
        try:
            question = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            
            if question.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not question:
                continue
                
            assistant.ask_question(question)
            
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
